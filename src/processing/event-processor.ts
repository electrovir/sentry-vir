import {extractErrorMessage} from '@augment-vir/common';
import {ErrorEvent, EventHint, Event as SentryEvent, TransactionEvent} from '@sentry/types';
import {
    EventExtraContextCreator,
    convertEventDetailsToSentryContext,
} from '../event-context/event-context';
import {extractEventSeverity} from '../event-context/event-severity';
import {extractExtraEventContext} from '../event-context/extra-event-context';

/** Attach extra event data for a sentry event. */
export function processSentryEvent(
    /** Event from Sentry. */
    event: SentryEvent,
    /** EventHint generated by Sentry. */
    hint: EventHint,
    /** Optional callback for creating extra event context. */
    createUniversalContext?: EventExtraContextCreator | undefined,
) {
    const extraContext = {
        ...extractExtraEventContext(hint),
        ...extractExtraEventContext(event),
        ...createUniversalContext?.(),
        originalFullMessage: event.message || extractErrorMessage(hint.originalException),
    };
    const sentryContext = convertEventDetailsToSentryContext(
        {
            severity: extractEventSeverity(event),
            extraContext,
        },
        {
            wasSentPrematurely: false,
        },
    );
    Object.assign(event, sentryContext);

    return event;
}

/** Tries to extract the original event message from different possible Sentry types. */
export function extractOriginalMessage(
    /** Event from Sentry. */
    event: Pick<TransactionEvent | ErrorEvent, 'message'>,
    /** EventHint generated by Sentry. */
    hint: EventHint | undefined,
): string {
    const message = event.message || extractErrorMessage(hint?.originalException);

    return message;
}
