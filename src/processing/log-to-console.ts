import {isTruthy} from '@augment-vir/common';
import {EventHint} from '@sentry/browser';
import {Event, Extras} from '@sentry/types';
import {
    EventSeverityEnum,
    consoleLogMethodPerSeverity,
    extractEventSeverity,
} from '../event-context/event-severity';
import {extractOriginalMessage} from './event-processor';

export enum LoggingState {
    Dev = 'dev',
    Prod = 'prod',
    NoSentryYet = 'no-sentry-yet',
}

export function logToConsoleFromSentry(
    /** The event from Sentry. */
    event: Event,
    /** The EventHint generated by Sentry. */
    hint: EventHint,
    loggingState: LoggingState,
): void {
    logToConsoleWithoutSentry(extractEventSeverity(event), loggingState, {
        event,
        extra: event.extra,
        hint,
        message: extractOriginalMessage(event, hint),
        originalException: hint.originalException,
    });
}

export function logToConsoleWithoutSentry(
    severity: EventSeverityEnum,
    loggingState: LoggingState,
    logData: {
        message: string;
        extra: undefined | Extras;
        event: Event | undefined;
        hint: EventHint | undefined;
        originalException: unknown;
    },
): void {
    const consoleMethod = consoleLogMethodPerSeverity[severity];

    const eventLogArg = {
        ...(logData.event ? {event: logData.event} : undefined),
        ...(logData.hint ? {hint: logData.hint} : undefined),
    };

    const logArgs = [
        logData.message,
        logData.extra,
        Object.keys(eventLogArg).length ? eventLogArg : undefined,
        logData.originalException,
    ].filter(isTruthy);

    if (loggingState === LoggingState.Dev) {
        consoleMethod('Would have sent to Sentry:', ...logArgs);
    } else if (loggingState === LoggingState.Prod) {
        consoleMethod('Sending to Sentry:', ...logArgs);
    } else if (loggingState === LoggingState.NoSentryYet) {
        consoleMethod('Logging before Sentry init:', ...logArgs);
    }
}
