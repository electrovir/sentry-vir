import {extractErrorMessage, isTruthy} from '@augment-vir/common';
import type {EventHint} from '@sentry/browser';
import type {ErrorEvent, TransactionEvent} from '@sentry/types';
import {getConsoleMethodForSeverity} from '../event-context/event-severity';

/** Creates a handler for Sentry events based on the given env. */
export function createSentryHandler(
    /** If in dev, events won't be sent to Sentry. They will only be logged in the console. */
    isDev: boolean,
) {
    /** The actual function that gets called when handling Sentry events. */
    function handleSentrySend(
        /** The event from Sentry. */
        event: TransactionEvent | ErrorEvent,
        /** The EventHint generated by Sentry. */
        hint: EventHint,
    ) {
        const consoleMethod = getConsoleMethodForSeverity(event);

        const message = extractOriginalMessage(event, hint);
        const logArgs = [
            message,
            event.extra,
            {event, hint},
            hint.originalException,
        ].filter(isTruthy);

        if (isDev) {
            consoleMethod('Would have sent to Sentry:', ...logArgs);
            return null;
        } else {
            consoleMethod('Sending to Sentry:', ...logArgs);
            return event;
        }
    }

    return handleSentrySend;
}

/** Tries to extract the original event message from different possible Sentry types. */
export function extractOriginalMessage(
    /** Event from Sentry. */
    event: TransactionEvent | ErrorEvent,
    /** EventHint generated by Sentry. */
    hint: EventHint,
): string {
    const message = event.message || extractErrorMessage(hint.originalException);

    return message;
}
